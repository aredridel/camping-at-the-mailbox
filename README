== Dependencies

- camping
	- markaby
	- metaid

- stdlib
	- net/imap
	- net/smtp
	- yaml

- ruby-dbi
	- dbd-sqlite3

- net-ldap

== Features

- Manipulating messages:
	- Read (including attachments)
	- Move to folders
	- Delete
	- Send, including handling large attachments

- Address book
	- AJAX autocompleted text entry for To: &c. fields.
	- LDAP directory read support

== Setup

<code>mailbox.conf</code> contains values to configure Camping at the Mailbox.

=== Required settings
<code>imaphost</code> and <code>smtphost</code>, both of which can use the 
token <code>%{domain}</code>, which will be replaced by the domain in the
supplied username, or a guess from the HTTP host.

=== Optional settings

<code>imapport</code> and <code>smtpport</code> can be used to change which 
ports are connected to. Ruby's Net::IMAP module will use SSL on port 993 for 
IMAP.

<code>smtpauth</code>, if present, will authenticate submissions to the SMTP
server with the same credentials used for IMAP

<code>smtptls</code>, if present, will force all SMTP connections to begin
with STARTLS (unconditionally at the moment)

<code>ldaphost</code> will activate LDAP directory lookups, and takes a
%{domain} token as well.  <code>ldapbase</code> will choose the base DN to
search in an LDAP directory, and will expand <code>%{domain}</code> into 
LDAP DN form (<code>dc=example,dc=org</code>). <code>ldapmailattr</code>
specifies the attribute to use as the email address, and
<code>ldapnameattr</code> specifies the attribute to use as the user's name.
<code>ldapport</code> selects the port to connect to.

Make sure that both the name and mail attributes are mandatory in your LDAP
schema.

=== Other files

You can make a file <code>banner</code>, which will be displayed on the login
screen.

== Schema

CREATE TABLE addresses (id integer primary key, name varchar(255), 
	address varchar(255) not null, user_id varchar(255) not null);
CREATE TABLE sessions ("id" INTEGER PRIMARY KEY NOT NULL NOT NULL, 
	"hashid" varchar(32), "created_at" datetime, "ivars" text);
CREATE UNIQUE INDEX addresses_uniq on addresses (user_id, address);

